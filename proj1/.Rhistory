f <- function(x) {
#y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
set.seed(1)
normals <- rnorm(100, 1, 2)
nLL <- make.NegLogLike(normals)
nLL
make.NegLogLike <- function(data, fixed=c(FALSE, FALSE)) {
params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2) / (sigma^2)
-(a + b)
}
}
set.seed(1)
normals <- rnorm(100, 1, 2)
nLL <- make.NegLogLike(normals)
nLL
ls(nLL)
ls(environment(nLL))
optim(c(mu=0, sigma=1), nLL)$par
nLL <- make.NegLogLike(normals, c(1, FALSE))
nLL <- make.NegLogLike(normals, c(FALSE, 2))
optim(c(mu=0, sigma=1), nLL)$par
optimize(nLL, c(-1, 3))$minimun
nLL <- make.NegLogLike(normals, c(FALSE, 2))
optimize(nLL, c(-1, 3))$minimun
optimize(nLL, c(-1, 3))$minimum
nLL <- make.NegLogLike(normals, c(1, FALSE))
optimize(nLL, c(1e-6, 10))$minimum
nLL <- make.NegLogLike(normals, c(1, FALSE))
x <- seq(1.7, 1.9, len=100)
y <- sapply(x, nLL)
plot(x, exp(-(y-min(y))), type='1')
plot(x, exp(-(y-min(y))), type='l')
x <-1 1:10
x <- 1:10
x > 5
x <- 1
x <- 1:10
if(x > 5) {
x <- 0
}
library(datasets)
data(iris)
str(data)
?data
head(iris)
summary(iris)
class(iris)
split(iris, iris$Species)
tapply(split(iris, iris$Species), function(elt) colMeans([,'Species']))
tapply(split(iris, iris$Species), function(elt) colMeans(elt[,'Species']))
ltapply(split(iris, iris$Species), function(elt) colMeans([,'Species']))
ltapply(split(iris, iris$Species), function(elt) colMeans([,c('Species')]))
ltapply(split(iris, iris$Species), function(elt) colMeans(elt[,'Species']))
lapply(split(iris, iris$Species), function(elt) colMeans(elt[,'Species']))
lapply(split(iris, iris$Species), function(elt) colMeans(elt[,c('Spetal.Length')]))
lapply(split(iris, iris$Species), function(elt) colMeans(elt[,c('Sepal.Length', 'Sepal.Width')]))
lapply(split(iris, iris$Species), function(elt) colMeans(elt[,c('Sepal.Length')]))
apply(iris[, 1:4], 2, mean)
colMeans(iris)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
str(mtcars)
split(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars, mtcars$cyl)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
lapply(split(mtcars$mpg, mtcars$cyl), mean)
mtcars$mgp
?mtcars
mtcars$mpg
mtcars$cyl
?split
split(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$hp, mtcars$cyl), mean)
res = sapply(split(mtcars$hp, mtcars$cyl), mean)
res
class(res)
names(res)
res['4']
abs(res['4']-res['8'])
res['4']-res['8']
res['8']
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f
z <- 10
f(3)
debug(ls)
debug(ls)
ls
ls()
c
undebug
undebug(ls)
ls()
help(local)
local(x)
local({x<10})
local({x<-10})
x
help(assign)
globalenv()
ls(globalenv())
?sprintf
outputfiles <- sprintf("getmonitor-testoutput%d.txt", 1:2)
outputfiles
options
?options
?scipen
??scipen
x <- 1
class(x)
id <- 1
sprintf('%0,3d', id)
sprintf('%0d', id)
sprintf('%0s', id)
sprintf('%3.0s', id)
sprintf('%3s', id)
sprintf('%03s', id)
sprintf('%03s', 100)
sprintf('%03s', 100)
id <- 12
normId = sprintf('%03d', id)
normId
getwd()
setwd("~/Desktop")
setwd("~/Dropbox/workspace/r/CDAHW1")
dir()
source('getmonitor-test.R')
getmonitor.testscript()
getmonitor.testscript()
getmonitor.testscript()
sprintf('%s/%03d.csv', 'specdata, 200)
''
''
sprintf('%s/%03d.csv', 'specdata', 200)
getmonitor.testscript()
dir()
complete.cases(iris)
read.csv('specdata/001.csv')
001 = read.csv('specdata/001.csv')
d001 = read.csv('specdata/001.csv')
d001
complete.cases(d001)
sum(complete.cases(d001))
read.csv('specdata/*.csv')
filenames <= sprintf('%s/%03s.csv', id)
filenames <= sprintf('%s/%03s.csv', 1:332)
filenames <- sprintf('%s/%03s.csv', 1:332)
filenames <- sprintf('%s/%03s.csv', 'specdata' , 1:332)
filenames
data=lapply(filenames, read.csv)
ata <-
s;
lapply(data, complete.cases)
complte <- lapply(data, complete.cases)
res <- lapply(complete, sum)
res <- lapply(complte, sum)
res
res <- sapply(complete, sum)
res <- sapply(complte, sum)
res
source('complete.R')
source('complete.R')
source('complete.R')
source('complete-test.R')
complete.testscript()
comp <- lapply(data, complete.cases)
res <- lapply(comp, sum)
res
names(res)
res <- as.data.frame(res)
res
head(res)
class(res)
names(res)
res <- sapply(comp, sum)
res
res <- sapply(comp, sum, simplify=F)
res
res <- sapply(comp, sum, simplify=T)
res
res <- sapply(comp, sum)
res <- data.frame(id, res)
res
res <- sapply(comp, sum)
res
id
id=1:332
comp <- lapply(data, complete.cases)
res <- sapply(comp, sum)
res <- data.frame(id, res)
res
comp <- lapply(data, complete.cases)
nobs <- sapply(comp, sum)
res <- data.frame(id, nobs)
res
complete.testscript()
str(cor)
str(list.files)
?cor
filenames <- list.files('./specdata', '*.csv')
data <- lapply(filenames, read.csv)
filenames <- list.files('./specdata', '*.csv')
filenames <- sprinf('%s/%s', directory, filenames)
data <- lapply(filenames, read.csv)
filenames <- list.files('./specdata', '*.csv')
filenames <- sprintf('%s/%s', directory, filenames)
filenames <- sprintf('%s/%s', directory, filenames)
filenames <- sprintf('%s/%s', 'specdata', filenames)
filenames
data <- read.csv('specdata/329.csv')
data
complete.cases(data)
data[complete.cases(data)]
class(data)
complet<-complete.cases(data)
comp<-complete.cases(data)
comp
data[apply(!is.na(data),1,all)]
str(apply)
str(all)
all(data,na.rm=T)
class(data)
data
all()
str(all)
all(data, na.rm=T)
str(read.csv)
data
data[!is.na(data)]
na.omit(data)
filenames <- list.files('specdata', '*.csv')
filenames <- sprintf('%s/%s', directory, filenames)
data <- lapply(filenames, read.csv)
directory <- 'specdata'
filenames <- sprintf('%s/%s', directory, filenames)
filenames <- list.files('specdata', '*.csv')
filenames <- sprintf('%s/%s', directory, filenames)
data <- lapply(filenames, read.csv)
comp <- lapply(data, na.omit)
length(compo)
length(comp)
str(tapply)
comp[1]
?tapply
?tapply
?lapply
filenames <- list.files('specdata', '*.csv')
filenames <- sprintf('%s/%s', directory, filenames)
data <- lapply(filenames, read.csv)
comp <- lapply(data, na.omit)
res <- sapply(comp, function(elt) cor(elt$nitrate, elt$nitrate))
res
comp <- lapply(data, na.omit)
res <- sapply(comp, function(elt) cor(elt$nitrate, elt$nitrate))
res
res <- sapply(comp, function(elt) cor(elt$nitrate, elt$sulfate))
res
comp
res <- sapply(comp, function(elt) cor(elt$nitrate, elt$sulfate))
res
cr <- corr("specdata", 150)
source('complete.R')
source('complete-test.R')
source('corr.R')
cr <- corr("specdata", 150)
head(cr)
summar(cr)
summary(cr)
length(cr)
cr <- corr("specdata", 5000)
length(cr)
na.omit
ls(na.omit)
na.omit
apply(comp, 1, function(elt) elt$nitrate>threshold && elt$sulfate>threshold )
data <- lapply(filenames, read.csv)
res <- sapply(data, function(elt) cor(elt$nitrate, elt$sulfate, na.rm=T))
data
data1 = data[1]
data
data[1]
data1 < -data[1]
data1 <- data[1]
data1
data1['nitrate']
data1[1]
data1[1,2]
class(data1)
str(all)
all(data1, na.rm=T)
head(data1)
class(data1)
class(data)
class(data[1])
filenames <- list.files('specdata', '*.csv')
filenames <- sprintf('%s/%s', directory, filenames)
data <- lapply(filenames, read.csv)
class(data[1])
directory <- 'specdata'
filenames <- list.files('specdata', '*.csv')
filenames
filenames <- sprintf('%s/%s', directory, filenames)
filenames
data <- lapply(filenames, read.csv)
data[1]
class(data[1])
class(data[[1])
class(data[[1]])
data1 = data[[1]]
class(data1)
?data1
head(data1)
data1[complete.cases(data1),]
data1[complete.cases(data1) && 1=1,]
data1[complete.cases(data1) && TRUE,]
data1[complete.cases(data1) && FALSE,]
data1[complete.cases(data1) & FALSE,]
data1[complete.cases(data1) & TRUE,]
data1[complete.cases(data1) & data1$nitrate>threshold & data1$sulfate>threshold,]
threshold <- 150
data1[complete.cases(data1) & data1$nitrate>threshold & data1$sulfate>threshold,]
threshold <- 10
data1[complete.cases(data1) & data1$nitrate>threshold & data1$sulfate>threshold,]
data1[complete.cases(data1) & data1$nitrate>threshold
,]
data1[complete.cases(data1),]
comp <- data1[complete.cases(data1),]
data1[complete.cases(data1) & data1$nitrate>threshold & data1$sulfate>threshold,]
threshold <- 1
data1[complete.cases(data1) & data1$nitrate>threshold & data1$sulfate>threshold,]
tt <- data1[complete.cases(data1) & data1$nitrate>threshold & data1$sulfate>threshold,]
length(tt)
thres <- lapply(data, function(x) x[complete.cases(x)&
x$nitrate>threshold & xsulfate>threshold,])
filenames <- list.files('specdata', '*.csv')
filenames <- sprintf('%s/%s', directory, filenames)
data <- lapply(filenames, read.csv)
thres <- lapply(data, function(x) x[complete.cases(x)&
x$nitrate>threshold & x$sulfate>threshold,])
sapply(thres, function(x) cor(x$nitrate, x$sulfate))
threshold<-5000
thres <- lapply(data, function(x) x[complete.cases(x)&
x$nitrate>threshold & x$sulfate>threshold,])
sapply(thres, function(x) cor(x$nitrate, x$sulfate))
length(res)
res <- sapply(thres, function(x) cor(x$nitrate, x$sulfate))
length(res)
res <- sapply(thres, function(x) cor(x$nitrate, x$sulfate))
res <- na.omit(res)
res
res <- sapply(thres, function(x) cor(x$nitrate, x$sulfate))
res
res <- na.omit(res)
return (res)
res <- sapply(thres, function(x) cor(x$nitrate, x$sulfate))
na.omit(res)
res
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
filenames <- list.files('specdata', '*.csv')
filenames <- sprintf('%s/%s', directory, filenames)
data <- lapply(filenames, read.csv)
thres <- lapply(data, function(x) x[complete.cases(x)&
x$nitrate>threshold & x$sulfate>threshold,])
res <- sapply(thres, function(x) cor(x$nitrate, x$sulfate))
return (res)
}
res <- corr('specdata')
res
summary(res)
res <- corr('specdata', threshold=5000)
summary(res)
res <- sapply(res, na.omit)
res
res <- corr('specdata', threshold=5000)
res
str(cor)
thres <- lapply(data, function(x) x[x$nitrate>threshold & x$sulfate>threshold,])
res <- lapply(thres, function(x) cor(x$nitrate, x$sulfate, use='complete'))
thres <- lapply(data, function(x) x[
x$nitrate>threshold & x$sulfate>threshold,])
complete.cases(x)&
x$nitrate>threshold & x$sulfate>threshold,])
res <- lapply(thres, function(x) cor(x$nitrate, x$sulfate, use='complete'))
thres <- lapply(data, function(x) x[complete.cases(x)&
x$nitrate>threshold & x$sulfate>threshold,])
res <- lapply(thres, function(x) cor(x$nitrate, x$sulfate, use='complete'))
data <- lapply(filenames, read.csv)
thres <- lapply(data, function(x) x[x$nitrate>threshold & x$sulfate>threshold,])
res <- lapply(thres, function(x) cor(x$nitrate, x$sulfate, use='all.obs'))
res
x
data1=data[[1]]
data1
cor(data1$nitrate, data1$sulfate, use='all.obs')
res <- cor(data1$nitrate, data1$sulfate, use='all.obs')
res
res?
>
l;
?cor
data1$nitrate
class(data1$nitrate)
source('complete.R')
complete('specdata')
thres <- comp[comp$nobs>threshold,]
thres
threshold
threshold <- 150
thres <- comp[comp$nobs>threshold,]
thres
comp <- complete(directory)
thres <- comp[comp$nobs>threshold,]
length(thres)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
comp <- complete(directory)
thres <- comp[comp$nobs>threshold,]
#thres <- lapply(data, function(x) x[,])
#res <- lapply(thres, function(x) cor(x$nitrate, x$sulfate, use='all.obs'))
#res <- sapply(res, na.omit)
return (res)
}
comp <- complete(directory)
thres <- comp[comp$nobs>threshold,]
thres
threshold
length(thres)
nrow(thres)
ncol(thres)
class(thres)
thres$id
filename <- sprintf('%s/%03s', directory, list.files(directory, '*csv'))
filename
filename <- sprintf('%s/%03s', directory, list.files(directory, '*csv'))
data < lapply(filename, read.csv)
data <- lapply(filename, read.csv)
class(data)
data[id]
thres <- comp[comp$nobs>threshold,]
id <- thres$id
data[id]
data[c(1,2)]
res <- sapply(data[id], function(x) cor(x$nitrate, x$sulfate))
res
data[1]
data[[1]]
class(data)
data[[c(1,2)]]
data[[2]]
res = c()
res
res.add
res = vector()
res
id <- thres$id
res <- sapply(data[id], function(x) cor(x$nitrate, x$sulfate, use='complete.obs'))
res
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
filename <- sprintf('%s/%03s', directory, list.files(directory, '*csv'))
data <- lapply(filename, read.csv)
dacomp <- complete(directory)
thres <- comp[comp$nobs>threshold,]
id <- thres$id
res <- sapply(data[id], function(x) cor(x$nitrate, x$sulfate, use='complete.obs'))
return (res)
}
cr <- corr('specdata', 150)
head(cr)
source('corr-test.R')
corr.testscript()
