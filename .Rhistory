sum = 0L
for (i in seq_along(iris)) {
cell = iris[i]
print cell
if (cell$Species == "virginica") {
sum = cell$Sepal.Length + sum
}
}
mean = sum / len(iris)
library(datasets)
data(iris)
sum = 0L
for (i in seq_along(iris)) {
cell = iris[i]
print (cell)
if (cell$Species == "virginica") {
sum = cell$Sepal.Length + sum
}
}
mean = sum / len(iris)
head(iris)
?df
df(,c('Sepal.Length', 'Species'))
df[,c('Sepal.Length', 'Species')]
df[,c('Sepal.Length','Species')]
iris[,c('Sepal.Length','Species')]
iris[,c('Sepal.Length',iris$Species=="virginica")]
iris[grep('Sepal.Length', iris$Species=="virginica")]
iris[,grep('Sepal.Length', iris$Species=="virginica")]
View(iris)
View(iris)
iris[,c('Sepal.Length',iris$Species=="virginica")]
iris[,c('Sepal.Length',Species=="virginica")]
iris[,c('Sepal.Length','Species'=="virginica")]
subset(iris, grepl("virginica", Species))
subset(iris, grepl("virginica", Species))$Sepal.Length
mean(subset(iris, grepl("virginica", Species))$Sepal.Length)
rowMeans(iris[, 1:4])
?apply
apply(iris[, 1:4], 2, mean)
colMeans(iris)
apply(iris, 1, mean)
apply(iris[, 1:4], 1, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
iris[,1:4]
apply(iris[, 1:4], c(1,2), mean)
apply(iris[, 1:4], c(2), mean)
apply(iris[, 1:4], c(1), mean)
iris
apply(iris[, 1:4], c(2), mean)
apply(iris[, 1:4], c(1), mean)
str(apply(iris[, 1:4], c(1), mean))
str(apply(iris[, 1:4], c(2), mean))
library(datasets)
data(mtcars)
mtcars
head(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
?tapply
v = vector()
v
v = vector(10)
help(vector)
i= i
i <- 1
i
type(i)
1 / Inf
1 / 0
0/
0
attributes()
help(attributes)
x <- c(.5, .6)
x
x <- c('a')
x
x <- c(1+0i, 2+4i) # complex
x
x <- vector('numeric', length=10)
x
y <- c(1.7, 'a')
y
y <- c(TRUE, 2) #numeric
y
y <- c('a', TRUE) # character
y
x <- 0:6
class(x)
as.numeric(x)
as.logical(x)
as.character(x)
as.complex(x)
m <- matrix(nrow = 2, ncol = 3)
m
help(matrix)
help(c)
help(matrix)
help(list)
x <- list(1, 'a', TRUE, 1+4i)
x
x <- 1:3
y <- 10:12
cbind(x, y)
rbind(x, y)
x <- factor(c('yes', 'yes', 'no'))
x
table(x)
help(table)
unclass(x)
help(unclass)
is.nan(0/0)
is.nan(Inf)
help(is.na)
x <- c(1,2,NA,10,3)
is.na(x)
x <- c(1,2,NA,NaN,3)
is.na(x)
is.nan(NA)
is.nan(Inf)
# row.names
# creating by calling read.table() or read.csv()
# conert to a matrix by data.matrix()
x <- c(1,2,NA,NaN,3)
x <- data.frame(foo=1:4, bar=c(T,T,F,F))
x
x <- 1:3
names(x)
names(x) <- c('foo', 'bar', 'norf')
x
names(x)
x <- 1:4; y <- 6:9
x+y
x > 2
help(rep)
x <- matrix(1:4,2,2); y <- matrix(rep(10,4),2,2)
x * y
x %*% y  # true matrix multiplication
[,1] [,2]
[1,]   40   40
[2,]   60   60
help(read.table)
[]
{}
()
y <- data.frame(a=1, b='a')
dput(y)
dput(y, file='y.R')
new.y <- dget('y.R')
new.y
x <- 'foo'
y <- data.frame(a=1, b='a')
dump(c('x', 'y'), file='dump.R')
rm(x, y)
source('data.R')
source('dump.R')
y
x
help(str)
fil
file
str(file)
str(help)
str({})
str([])
str()
str(str)
x <- rnorm(100, 2, 4)
summary(x)
str(x)
f <- gl(40, 10)
str(f)
help(gl)
f
libaray(datasets)
library(datasets)
head(airqulity)
head(airquality)
str(airquality)
m <- matrix(rnorm(100), 10, 10)
str(m)
m <- matrix(nrow = 2, ncol = 3)
m[1,1]
m[,0]
m[0,0]
m[0]
m[0,1]
m[1,1]
m[1,3]
m <- matrix(rnorm(6), 2,3)
m
m[1,1]
m <- matrix(1:6, nrow = 2, ncol = 3)
m
m[1,]
m[,1]
s <- split(airquality, airquality$Month)
str(s)
airquality
help(computeEstimate)
args(lm)
str(ln)
str(lm)
args(paste)
paste('a', 'b', sep=':')
paste('a', 'b', se=':')
search()
.GlobalEnv
library(survival)
search()
library(lattice)
search()
environment(f)
f <- function(x, y) {
x^2 + y/z
}
environment(f)
parent.env(f)
parent.env(f)
parent.env(environment(f))
f = environment(f)
parent.env(f)
make.power <- function(n){
pow <- function(x) {
x^n
}
pow
}
cube <- make.power(3)
square <- make.power(2)
cube(3)
square(3)
ls(ef)
ef = environment(ef)
ef = environment(f)
ls(ef)
f <- function(x, y) {
x^2 + y/z
}
ef = environment(f)
ls(ef)
ls(cube)
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
f()
g <- function(x) {
x*y
}
f(3)
y <- 10
f <- function(x) {
#y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(3)
set.seed(1)
normals <- rnorm(100, 1, 2)
nLL <- make.NegLogLike(normals)
nLL
make.NegLogLike <- function(data, fixed=c(FALSE, FALSE)) {
params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2) / (sigma^2)
-(a + b)
}
}
set.seed(1)
normals <- rnorm(100, 1, 2)
nLL <- make.NegLogLike(normals)
nLL
ls(nLL)
ls(environment(nLL))
optim(c(mu=0, sigma=1), nLL)$par
nLL <- make.NegLogLike(normals, c(1, FALSE))
nLL <- make.NegLogLike(normals, c(FALSE, 2))
optim(c(mu=0, sigma=1), nLL)$par
optimize(nLL, c(-1, 3))$minimun
nLL <- make.NegLogLike(normals, c(FALSE, 2))
optimize(nLL, c(-1, 3))$minimun
optimize(nLL, c(-1, 3))$minimum
nLL <- make.NegLogLike(normals, c(1, FALSE))
optimize(nLL, c(1e-6, 10))$minimum
nLL <- make.NegLogLike(normals, c(1, FALSE))
x <- seq(1.7, 1.9, len=100)
y <- sapply(x, nLL)
plot(x, exp(-(y-min(y))), type='1')
plot(x, exp(-(y-min(y))), type='l')
setwd("~/Dropbox/workspace/r")
x <- list(a=1:5, b=rnorm(10))
lapply(x, mean)
runif
x <- 1:4
lappl(x, runif)
lapply(x, runif)
args(funif)
args(runif)
x = list(matrix(1:4,2,2), matrix(1:6, 3,2))
lapply(x, function(elt) elt[,1])
x <- list(a=1:4, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,5))
lapply(x, mean)
sapply(x, mean) # a vector returned
str(apply)
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
x
y <- matrix(1:30, 10, 10, 10)
y
y <- matrix(1:100, 10, 10, 10)
y
y <- matrix(1:100, 10, 10)
y
apply(y, 1, sum)
apply(y, 2, sum)
str(quantile)
quantile(x)
quantile(x, c=(0.25,0.75))
quantile(x, probs=(0.25,0.75))
quantile(x, c(0.25,0.75))
quantile(x, c(0.25,0.75,1))
quantile(x, c(0.25,0.75,0.99))
x <- matrix(rnorm(200, 20, 10))
apply(x, 1, quantile, probs=c(0.25,0.75))
x <- matrix(1:6, 2, 3))
apply(x, 1, quantile, probs=c(0.25,0.75))
x <- matrix(1:6, 2, 3))
x <- matrix(1:6, 2, 3)
apply(x, 1, quantile, probs=c(0.25,0.75))
x
help(quantile)
a <- array(rnorm(2 * 2 * 10), c(2,2,10))
apply(a, c(1,2), mean)
x <- matrix(rnorm(200), 20, 10)
colMeans = apply(x, 2, mean)
colMeans
x <- matrix(1:6, 2, 3)
apply(x, 1, quantile, probs=c(0.25,0.75))
x
array()
str(array)
rnorm(40)
rnorm(40)
setseed(1)
seed(1)
a <- array(rnorm(2 * 2 * 10), c(2,2,10))
a
a <- array(rnorm(2 * 2 * 2), c(2,2,2))
a
str(array)
c(2,2,2)
help(array)
a <- array(1:6, c(2,2,2))
apply(a, c(1,2), mean)
a
apply(a, c(1,2), mean)
a <- array(1:8, c(2,2,2))
a
apply(a, c(1,2), mean)
str(apply)
a <- array(1:8, c(2,2,2))
apply(a, c(1,2), mean)
m = matrix(1:4, 2,2)
m
apply(m, c(1,2), mean)
a <- array(1:8, c(2,2,2))
a
## mapply
## mapply
## mapply
## mapply
str(tapply)
x <- c(1:10, 11:20, 21:30)
f <- gl(3,10)
f
tapply(x, f, mean)
x
x <- c(1:10, 21:30, 51:60)
f <- gl(3,10)  # generate levels
tapply(x, f, mean)
tapply(x, f, mean, simplfy=F)
tapply(x, f, mean, simpilfy=F)
tapply(x, f, mean, simplify=F)
tapply(x, f, range)
str(split)
x <- c(1:10, 21:30, 51:60)
f <- gl(3,10)  # generate levels
split(x,f)
lapply(split(x,f), mean)
library(datasets)
head(airquality)
s <- split(airquality, airauliaty$Month)
s <- split(airquality, airquality$Month)
s
colMeans
str(colMeans)
lapply(s$Ozone, sum)
s$Ozone
s
lapply(s, 'Ozone', sum)
lapply(s, 1, sum)
lapply(s, 2, sum)
str(lapply)
lapply(s, sum)
lapply(s, function(x) colMeans(x[,c('Ozone')]))
lapply(s, function(x) colMeans(x[,c('Ozone', 'Wind')]))
lapply(s, function(x) x[,c('Ozone', 'Wind')])
(
lapply(s, function(x) colMeans(()x[,c('Ozone', 'Wind')]))
lapply(s, function(x) colMeans((x[,c('Ozone', 'Wind')]))
lapply(s, function(x) colMeans((x[,c('Ozone', 'Wind')])))
lapply(s, function(x) colMeans((x[,c('Ozone', 'Wind')])))
colMeans()
help(colMeans)
x
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
s
s[,c('Ozone')]
s[,c('Ozone', 'Wind')]
s[,c('Ozone', 'Wind', 'Solar.R')]
s[c('Ozone', 'Wind', 'Solar.R')]
help(colMeans)
lapply(s, function(x) colMeans((x[,c('Ozone', 'Solar.R', 'Wind',)])))
lapply(s, function(x) colMeans((x[,c('Ozone', 'Solar.R', 'Wind')])))
lapply(s, function(x) colMeans((x[,c('Ozone', 'Solar.R', 'Wind')]), na.rm=T))
lapply(s, function(x) colMeans(x[,c('Ozone', 'Solar.R', 'Wind')]), na.rm=T))
, 'Solar.R', 'Wind')]), na.rm=T
lapply(s, function(x) colMeans((x[,c('Ozone', 'Solar.R', 'Wind')]), na.rm=T))
s
(s[,c('Ozone', 'Wind', 'Solar.R')])
x <- 1:10
f1 <- gl(2, 5)
f2 <- gl(5, 2)
interaction(f1, f2)
str(split(x, list(f1, f2)))
str(split(x, list(f1, f2), drop=TRUE))
str(dataframe)
str(data.dataframe)
mtcars
mtcars
mtcars[,'mpg']
type
class(airquality)
x <- 1:10
f1 <- gl(2, 5)
f2 <- gl(5, 2)
interaction(f1, f2)
f1
f2
f1 [1] 1.1 1.1 1.2 1.2 1.3 2.3 2.4 2.4 2.5 2.5
Levels: 1.1 2.1 1.2 2.2 1.3 2.3 1.4 2.4 1.5 2.5
clear
clear()
str(mapply)
rep(1,4)
mapply(rep, 1:4, 4:1)
invisible(0)
str(invisible)
str(cat)
cat(123)
cat(123,123,12412)
mean(y)
mean(noexsit)
traceback()
debug(printmsg)
printmsg <- function(x) {
if (is.na(x)) {
print('x is a missing value')
}
# do something
invisible(x) # still return the same object, but won't auto print
#  the warning msg will not print too
}
debug(printmsg)
printmsg()
n
n
c
printmsg()
h
help
?
/
?c
?vector
?str
run
c
options(error=recover)
read.csv('nosuchfile')
q
?options
getOption(error)
x <- 1:10
x > 5
if (x > 5) {}
if (x > 5) {print ('cant')}
if (x > 5) {print ('cant')} else {print ('yes')}
