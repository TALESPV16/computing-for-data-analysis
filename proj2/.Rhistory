if (! outcome %in% outcomes) stop('invalid outcome')
measure[,11] <- as.numeric(measure[,11])
tuples <- measure[measure$State==state,]
min(tuples[,11], na.rm=T)
state='NY'
tuples <- measure[measure$State==state,]
min(tuples[,11], na.rm=T)
tuples[,11]
class(tuples[,11])
?min
?which.min
x <- c(1:4,0:5,11)
which.min(x)
x
measure[,11] <- as.numeric(measure[,11])
measure.state <- measure[measure$State==state,]
idx <- which.min(measure.state[,11], na.rm=T)
idx
idx <- which.min(measure.state[,11])
idx
measure.state[110,]
measure.state[110,11]
measure.state[110,2]
res <- measure.state[idx,'Hospital Name']
res
res <- measure.state[idx, 2]
res
class(states)
length(res)
length(res) > 1
length(res) == 1
sort(c('b','a','c'))
sort(c('b','a','c'))[1]
state = 'NY'
measure[state]
meaure
measure <- read.csv("outcome-of-care-measures.csv", colClasses='character')
outcomes <- c('heart attack', 'heart failure', 'pneumonia')
measure[state]
measure[state,]
length(measure[state,])
measure[outcome]
outcome = 'heart attack'
measure[outcome]
measure <- read.csv("outcome-of-care-measures.csv", colClasses='character')
outcomes <- c('heart attack', 'heart failure', 'pneumonia')
if (outcome == outcomes[1]) {
# heart attack
outcome = 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'
} else if (outcome == outcomes[2]) {
}
outcome
measure[state,outcome]
state
outcome
measure[state,outcome]
measure[state,]
measure[,outcome]
measure[c(state, outcome)]
?subset
subset(select=c(state, outcome))
subset(measure, select=c(state, outcome))
measure[,outcome] <- as.numeric(measure[,outcome])
measure.state <- measure[measure$State==state,]
idx <- which.min(measure.state[,11])
idx
if (length(res) > 1) {
sort(res)[1]
}
source("best.R")
best('TX', 'heart attack')
best('TX', 'heart attack')
source("best.R")
best('TX', 'heart attack')
best('TX', 'heart failure')
best('MD', 'heart attack')
best('MD', 'pneumonia')
state = 'TX'
outcome = 'heart failure'
measure <- read.csv("outcome-of-care-measures.csv", colClasses='character')
outcomes <- c('heart attack', 'heart failure', 'pneumonia')
if (outcome == outcomes[1]) {
# heart attack
outcome = 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'
} else if (outcome == outcomes[2]) {
# heart failure
outcome = 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure'
} else if (outcome == outcomes[3]) {
# pneumonia
outcome = 'Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia'
} else {
stop("Fatal error")
}
outcome
measure[,outcome] <- as.numeric(measure[,outcome])
measure.state <- measure[measure$State==state,]
idx <- which.min(measure.state[,outcome])
res <- measure.state[idx, 2]
if (length(res) > 1) {
res <- sort(res)[1]
}
print (res)
source("best.R")
best('TX', 'heart attack')
?suppressWarnings
source("best.R")
best('TX', 'heart attack')
> best("BB", "heart attack")
best('TX', 'heart attack')
best("BB", "heart attack")
source("submitscript.R")
sumbit()
source("submitscript.R")
submit()
submit()
source("http://spark-public.s3.amazonaws.com/compdata/scripts/submitscript.R")
package.contents())
package.contents()
install.packages()
install.packages('RCurl')
install.packages('RCurl')
submit()
submit()
submit()
submit()
measure <- read.csv("outcome-of-care-measures.csv", colClasses='character')
outcomes <- c('heart attack', 'heart failure', 'pneumonia')
suppressWarnings(measure[,outcome] <- as.numeric(measure[,outcome]))
measure.state <- measure[measure$State==state,]
sort(measure.state[,outcome])
measure
?with
dd <- data.frame(b = factor(c("Hi", "Med", "Hi", "Low"),
levels = c("Low", "Med", "Hi"), ordered = TRUE),
x = c("A", "D", "A", "C"), y = c(8, 3, 9, 9),
z = c(1, 1, 1, 2))
dd
dd[with(dd, order(-z, b)), ]
dd[with(dd, order(z, b)), ]
measure.state[with(measure.state, order(outcome, state))]
measure.state[with(measure.state, order(outcome, state)), ]
sorted <- measure.state[with(measure.state, order(outcome, state)), ]
length(sorted)
sorted[length(sorted)]
sorted[length(sorted)-1]
sorted <- measure.state[with(measure.state, order(outcome, state)), ]['Hospital Name']
sorted <- measure.state[with(measure.state, order(outcome, state)), ]
sorted
head(sorted)
class(sorted)
sorted$Hospital.Name
sorted[,1]
sorted[,2]
sorted
sorted[1]
sorted[2]
sorted[,2]
sorted <- measure.state[order(dd[,outcome], dd[,2]),]
c(1,2,3,4)['1']
c(1,2,3,4)[1]
sorted <- measure.state[order(dd[,outcome], dd[,2]),]
sorted <- measure.state[order(measure.state[,outcome], measure.state[,2]),]
sorted
print sorted[1]
print sorted[1,2]
class(sorted)
sorted[1]
sorted[2]
sorted[1,2]
print sorted[1,2]
print (sorted[1,2])
print (sorted[as.integer(num),2])
num=5
num='5'
print (sorted[as.integer(num),2])
print (sorted[length(sorted), 2])
source("rankhospital.R")
source("rankhospital.R")
print ('NA')
} else {
rankhospital('TX', 'heart attack', 4)
rankhospital('TX', 'heart failure', 4)
rankhospital('TX', 'heart attack', 'worst')
rankhospital('MD', 'heart attack', 'worst')
rankhospital('MD', 'heart attack', 'worst')
View(dd)
View(dd)
View(dd)
View(sorted)
debug(rankhospital)
rankhospital('MD', 'heart attack', 'worst')
n
n
n
n
n
n
n
n
n
n
n
n
print (sorted)
n
print (num)
num == 'worst'
n
n
print (sorted[length(sorted),2])
print (sorted[length(sorted)-1,2])
print (sorted[length(sorted)-2,2])
c
debug(rankhospital)
undebug(rankhospital)
state='MD'
outcome='heart attack'
num='worst'
measure <- read.csv("outcome-of-care-measures.csv", colClasses='character')
outcomes <- c('heart attack', 'heart failure', 'pneumonia')
outcome = 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'
suppressWarnings(measure[,outcome] <- as.numeric(measure[,outcome]))
measure.state <- measure[measure$State==state,]
sorted <- measure.state[order(measure.state[,outcome], measure.state[,2]),]
length(sorted)
sorted[46]
sorted[46,]
sorted[46,2]
sorted[45,2]
?length
length(1:$)
length(1:4)
x <- 1:4
x[4]
x[0]
x[1]
x[5]
x[4]
?order
sorted <- measure.state[order(measure.state[,outcome], measure.state[,2], na.last=NA),]
source("rankhospital.R")
rankhospital('MD', 'heart attack', 'worst')
debug(rankhospital)
rankhospital('MD', 'heart attack', 'worst')
n
n
n
n
n
n
n
n
n
n
n
n
n
n
print (num)
n
length(sorted)
n
n
n
rankhospital('MD', 'heart attack', 'worst')
n
n
n
n
n
n
n
n
n
n
n
n
n
q
c
source("rankhospital.R")
rankhospital('MD', 'heart attack', 'worst')
debug(rankhospital)
rankhospital('MD', 'heart attack', 'worst')
n
n
n
n
n
n
n
n
n
n
n
n
n
print (length(sorted))
sorted <- measure.state[order(measure.state[,outcome], measure.state[,2], na.last=NA),]
sorted
length(sorted)
c
state='MD'
outcome='heart attack'
num='worst'
measure <- read.csv("outcome-of-care-measures.csv", colClasses='character')
outcomes <- c('heart attack', 'heart failure', 'pneumonia')
outcome = 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'
suppressWarnings(measure[,outcome] <- as.numeric(measure[,outcome]))
measure.state <- measure[measure$State==state,]
sorted <- measure.state[order(measure.state[,outcome], measure.state[,2], na.last=NA),]
sorted[length(sorted),2]
length(sorted)
View(sorted)
size
?data.frame
sorted[-1,2]
last.warning()
row(sorted)
sorted[nrow(sorted),2]
source("rankhospital.R")
rankhospital('MD', 'heart attack', 'worst')
rankhospital('MN', 'heart attack', 'worst')
rankhospital('MN', 'heart attack', 5000)
source("rankhospital.R")
rankhospital('MN', 'heart attack', 5000)
source("http://spark-public.s3.amazonaws.com/compdata/scripts/submitscript.R")
submit()
submit()
submit()
submit()
submit()
rankhospital('MD', 'heart attack', 4)
rankhospital('MD', 'heart attack', 'best')
rankhospital('MD', 'heart attack', 'worst')
bear('MD', 'pneunmonia')
### 5, Finding the best hospital in a state
source("best.R")
beat('MD', 'pneunmonia')
best('MD', 'pneunmonia')
best('MD', 'pneumonia')
rankhospital('MD', 'pneumonia', 10000) # NA
rankhospital('MD', 'heart failure', 4)
measure <- read.csv("outcome-of-care-measures.csv", colClasses='character')
states <- measure$Sate
measure <- read.csv("outcome-of-care-measures.csv", colClasses='character')
states <- measure$Sate
unique(states)
?unique
class(states)
states <- measure$State
class(states)
is.vector(states)
unique.array(states)
states
levels(states)
?levels
levels(table(states))
table(states)
factor(table(states))
levels(factor(table(states)))
levels(table(states))
levels(factor(states))
levels
lev <- levels(factor(states))
class(lev)
is.vector(lev)
lapply(lev, best)
source("best.R")
lapply(lev, best)
lapply(lev, outcome, best)
outcome='heart attack'
lapply(lev, outcome, best)
states <- measure$State
for (s in lev <- levels(factor(states)))
print (s)
best <- function(state, outcome) {
## Read outcome data
measure <- read.csv("outcome-of-care-measures.csv", colClasses='character')
outcomes <- c('heart attack', 'heart failure', 'pneumonia')
## Check that state and outcome are valid
if (! state %in% measure$State) stop('invalid state')
if (! outcome %in% outcomes) stop('invalid outcome')
# format outcome
if (outcome == outcomes[1]) {
# heart attack
outcome = 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'
} else if (outcome == outcomes[2]) {
# heart failure
outcome = 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure'
} else if (outcome == outcomes[3]) {
# pneumonia
outcome = 'Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia'
} else {
stop("Fatal error")
}
## Return hospital name in that state with lowest 30-day death rate
suppressWarnings(measure[,outcome] <- as.numeric(measure[,outcome]))
# subset operation, could opt?
measure.state <- measure[measure$State==state,]
idx <- which.min(measure.state[,outcome])
res <- measure.state[idx, 2]
if (length(res) > 1) {
res <- sort(res)[1]
}
print (res)
}
for (s in lev <- levels(factor(states)))
print(best(s, outcome))
with(outcome)
lapply(lev, outcome=outcome, best)
best <- function(state, outcome) {
## Read outcome data
#measure <- read.csv("outcome-of-care-measures.csv", colClasses='character')
outcomes <- c('heart attack', 'heart failure', 'pneumonia')
## Check that state and outcome are valid
if (! state %in% measure$State) stop('invalid state')
if (! outcome %in% outcomes) stop('invalid outcome')
# format outcome
if (outcome == outcomes[1]) {
# heart attack
outcome = 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'
} else if (outcome == outcomes[2]) {
# heart failure
outcome = 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure'
} else if (outcome == outcomes[3]) {
# pneumonia
outcome = 'Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia'
} else {
stop("Fatal error")
}
## Return hospital name in that state with lowest 30-day death rate
suppressWarnings(measure[,outcome] <- as.numeric(measure[,outcome]))
# subset operation, could opt?
measure.state <- measure[measure$State==state,]
idx <- which.min(measure.state[,outcome])
res <- measure.state[idx, 2]
if (length(res) > 1) {
res <- sort(res)[1]
}
#print (res)
invisible(res)
}
lapply(lev, outcome=outcome, best)
besthos <- sapply(lev, outcome=outcome, best)
res <- data.frame(lev, besthos)
res
states <- measure$State
state <- levels(factor(states))
#for (s in )
#  bst <- best(s, outcome)
hospital <- sapply(state, outcome=outcome, best)
## Return a data frame with the hospital names and the (abbreviated) state name
res <- data.frame(hospital, state)
res
source("rankall.R")
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 200), 10)
head(rankall("heart attack", 500), 10)
head(rankall("heart attack", 5000), 10)
head(rankall("heart attack", 500000), 10)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
#measure <- read.csv("outcome-of-care-measures.csv", colClasses='character')
outcomes <- c('heart attack', 'heart failure', 'pneumonia')
## Check that state and outcome are valid
if (! state %in% measure$State) stop('invalid state')
if (! outcome %in% outcomes) stop('invalid outcome')
# format outcome
if (outcome == outcomes[1]) {
# heart attack
outcome = 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack'
} else if (outcome == outcomes[2]) {
# heart failure
outcome = 'Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure'
} else if (outcome == outcomes[3]) {
# pneumonia
outcome = 'Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia'
} else {
stop("Fatal error")
}
## Return hospital name in that state with the given rank 30-day death rate
suppressWarnings(measure[,outcome] <- as.numeric(measure[,outcome]))
measure.state <- measure[measure$State==state,]
sorted <- measure.state[order(measure.state[,outcome], measure.state[,2], na.last=NA),]
if (num == 'best') {
#print (sorted[1, 2])
invisible(sorted[1, 2])
} else if (num == 'worst') {
# print (sorted[length(sorted), 2]) length(data.frame) caculates the variables number
#print (sorted[nrow(sorted),2])
invisible(sorted[nrow(sorted),2])
} else {
#print (sorted[as.integer(num),2])
invisible(sorted[as.integer(num),2])
}
}
hospital <- sapply(state, outcome=outcome, num=num, rankhospital)
num='best'
hospital <- sapply(state, outcome=outcome, num=num, rankhospital)
res <- data.frame(hospital, state)
invisible(res)
res
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
submit()
source("http://spark-public.s3.amazonaws.com/compdata/scripts/submitscript.R")
submit()
submit()
submit()
